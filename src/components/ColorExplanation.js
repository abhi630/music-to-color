import React from 'react';
import { Paper, Text, Stack, Group, Badge } from '@mantine/core';

const ColorExplanation = ({ audioFeatures }) => {
  if (!audioFeatures?.colors?.palette) return null;

  const {
    tempo,
    pitch,
    rms,
    key,
    mood,
    timbre
  } = audioFeatures;

  const getTempoDescription = (bpm) => {
    if (bpm <= 80) return 'slow tempo (cool colors: blue to green)';
    if (bpm <= 120) return 'medium tempo (neutral colors: green to yellow)';
    return 'fast tempo (warm colors: yellow to red)';
  };

  const getMoodDescription = (mood) => {
    if (!mood) return null;
    const descriptions = {
      'Energetic/Happy': 'energetic and happy (bright, warm colors)',
      'Cheerful/Positive': 'cheerful and positive (warm, saturated colors)',
      'Peaceful/Calm': 'peaceful and calm (soft, cool colors)',
      'Melancholic/Tense': 'melancholic or tense (muted, cool colors)',
      'Sad/Depressed': 'sad or depressed (dark, desaturated colors)',
      'Aggressive/Intense': 'aggressive and intense (strong, dark colors)'
    };
    return descriptions[mood.primary];
  };

  const getKeyDescription = (key) => {
    if (!key) return null;
    return `${key.rootNote} ${key.scale} (${key.scale === 'major' ? 'brighter and more saturated' : 'darker and less saturated'})`;
  };

  return (
    <Paper p="md" radius="md" withBorder>
      <Stack spacing="md">
        <Text size="xl" weight={700} color="indigo">Color Mapping Explanation</Text>
        
        <Stack spacing="xs">
          <Group spacing="xs">
            <Badge color="blue" size="lg">Base Color</Badge>
            <Text>Generated from {getTempoDescription(tempo)}</Text>
          </Group>

          {pitch && (
            <Group spacing="xs">
              <Badge color="cyan" size="lg">Saturation</Badge>
              <Text>
                Influenced by pitch ({pitch.toFixed(1)} Hz) - 
                {pitch < 500 ? ' lower pitch = less saturated' : ' higher pitch = more saturated'}
              </Text>
            </Group>
          )}

          {rms && (
            <Group spacing="xs">
              <Badge color="teal" size="lg">Brightness</Badge>
              <Text>
                Based on loudness (RMS: {rms.toFixed(3)}) - 
                {rms < 0.3 ? ' quieter = darker' : ' louder = brighter'}
              </Text>
            </Group>
          )}

          {key && (
            <Group spacing="xs">
              <Badge color="green" size="lg">Key Influence</Badge>
              <Text>Musical key: {getKeyDescription(key)}</Text>
            </Group>
          )}

          {mood && (
            <Group spacing="xs">
              <Badge color="yellow" size="lg">Mood</Badge>
              <Text>Detected mood: {getMoodDescription(mood)}</Text>
            </Group>
          )}

          {timbre && (
            <Group spacing="xs">
              <Badge color="orange" size="lg">Timbre</Badge>
              <Text>
                Complexity: {timbre.complexity < 0.3 ? 'simple (subtle variations)' : 'complex (more varied colors)'}
              </Text>
            </Group>
          )}
        </Stack>

        <Text size="sm" color="dimmed" mt="md">
          The color palette is generated by combining all these features, with complementary and analogous colors 
          added to create a harmonious set of colors that represent different aspects of the audio.
        </Text>
      </Stack>
    </Paper>
  );
};

export default ColorExplanation; 